# reset_test_data.py
"""
AnabolicPizza Shop - Reset Test Data Script
Vyma≈æe v≈°etky testov√© d√°ta, zachov√° produkty a kateg√≥rie
"""

import asyncio
from motor.motor_asyncio import AsyncIOMotorClient
from datetime import datetime
import os
from dotenv import load_dotenv

load_dotenv()

MONGODB_URI = os.getenv("MONGODB_URI", "mongodb://localhost:27017")

async def show_current_stats():
    """Uk√°≈æ aktu√°lne ≈°tatistiky"""
    client = AsyncIOMotorClient(MONGODB_URI)
    db = client.telegram_shop
    
    print("\nüìä AKTU√ÅLNY STAV DATAB√ÅZY:")
    print("-" * 40)
    
    stats = {
        "Objedn√°vky": await db.orders.count_documents({}),
        "Pou≈æ√≠vatelia": await db.users.count_documents({}),
        "Predajcovia": await db.sellers.count_documents({}),
        "Kup√≥ny": await db.referral_codes.count_documents({}),
        "V√Ωplaty": await db.seller_payouts.count_documents({}),
        "Produkty": await db.products.count_documents({}),
        "Kateg√≥rie": await db.categories.count_documents({})
    }
    
    for name, count in stats.items():
        status = "‚úÖ" if count > 0 else "‚ö™"
        print(f"{status} {name:15s}: {count:,}")
    
    # Tr≈æby
    pipeline = [
        {"$match": {"status": {"$in": ["paid", "completed"]}}},
        {"$group": {"_id": None, "total": {"$sum": "$total_usdt"}}}
    ]
    revenue = await db.orders.aggregate(pipeline).to_list(1)
    if revenue:
        print(f"\nüí∞ Celkov√© tr≈æby: ${revenue[0]['total']:,.2f}")
    
    client.close()
    return stats

async def reset_data(keep_products=True):
    """Resetuj testov√© d√°ta"""
    client = AsyncIOMotorClient(MONGODB_URI)
    db = client.telegram_shop
    
    print("\nüßπ MAZANIE D√ÅT...")
    print("-" * 40)
    
    # Vyma≈æ d√°ta
    deleted = {}
    
    # Objedn√°vky
    result = await db.orders.delete_many({})
    deleted["Objedn√°vky"] = result.deleted_count
    print(f"‚ùå Vymazan√Ωch {result.deleted_count} objedn√°vok")
    
    # Pou≈æ√≠vatelia
    result = await db.users.delete_many({})
    deleted["Pou≈æ√≠vatelia"] = result.deleted_count
    print(f"‚ùå Vymazan√Ωch {result.deleted_count} pou≈æ√≠vateƒæov")
    
    # Predajcovia
    result = await db.sellers.delete_many({})
    deleted["Predajcovia"] = result.deleted_count
    print(f"‚ùå Vymazan√Ωch {result.deleted_count} predajcov")
    
    # Kup√≥ny
    result = await db.referral_codes.delete_many({})
    deleted["Kup√≥ny"] = result.deleted_count
    print(f"‚ùå Vymazan√Ωch {result.deleted_count} kup√≥nov")
    
    # V√Ωplaty
    result = await db.seller_payouts.delete_many({})
    deleted["V√Ωplaty"] = result.deleted_count
    print(f"‚ùå Vymazan√Ωch {result.deleted_count} v√Ωplat")
    
    # Chat spr√°vy (voliteƒæn√©)
    result = await db.chat_messages.delete_many({})
    if result.deleted_count > 0:
        print(f"‚ùå Vymazan√Ωch {result.deleted_count} chat spr√°v")
    
    # Support tickets (voliteƒæn√©)
    result = await db.support_tickets.delete_many({})
    if result.deleted_count > 0:
        print(f"‚ùå Vymazan√Ωch {result.deleted_count} support ticketov")
    
    if keep_products:
        # Reset sold_count pre produkty
        result = await db.products.update_many({}, {"$set": {"sold_count": 0}})
        print(f"‚Üª Resetovan√Ωch {result.modified_count} produktov (sold_count = 0)")
        print("‚úÖ Produkty a kateg√≥rie zachovan√©")
    else:
        # Vyma≈æ aj produkty a kateg√≥rie
        prod_result = await db.products.delete_many({})
        cat_result = await db.categories.delete_many({})
        print(f"‚ùå Vymazan√Ωch {prod_result.deleted_count} produktov")
        print(f"‚ùå Vymazan√Ωch {cat_result.deleted_count} kateg√≥ri√≠")
    
    client.close()
    return deleted

async def main():
    """Hlavn√Ω program"""
    print("="*60)
    print("üîÑ ANABOLICPIZZA - RESET TESTOV√ùCH D√ÅT")
    print("="*60)
    
    # Uk√°≈æ aktu√°lny stav
    stats = await show_current_stats()
    
    # Ak nie s√∫ ≈æiadne d√°ta
    if all(count == 0 for name, count in stats.items() if name not in ["Produkty", "Kateg√≥rie"]):
        print("\n‚ú® Datab√°za je u≈æ pr√°zdna!")
        return
    
    # Pon√∫kni mo≈ænosti
    print("\nüéØ MO≈ΩNOSTI:")
    print("-" * 40)
    print("1. Vymaza≈• v≈°etky testov√© d√°ta (zachova≈• produkty)")
    print("2. Vymaza≈• V≈†ETKO vr√°tane produktov")
    print("3. Zru≈°i≈•")
    
    choice = input("\nVyber mo≈ænos≈• (1-3): ").strip()
    
    if choice == "1":
        print("\n‚ö†Ô∏è  TOTO VYMA≈ΩE:")
        print("  ‚Ä¢ V≈°etky objedn√°vky")
        print("  ‚Ä¢ V≈°etk√Ωch pou≈æ√≠vateƒæov")
        print("  ‚Ä¢ V≈°etk√Ωch predajcov a kup√≥ny")
        print("  ‚Ä¢ V≈°etky v√Ωplaty")
        print("\n‚úÖ TOTO ZACHOV√Å:")
        print("  ‚Ä¢ Produkty")
        print("  ‚Ä¢ Kateg√≥rie")
        
        confirm = input("\nNaozaj vymaza≈•? (yes/no): ").strip().lower()
        
        if confirm == "yes":
            await reset_data(keep_products=True)
            print("\n‚úÖ Reset dokonƒçen√Ω!")
        else:
            print("\n‚ùå Zru≈°en√©")
            
    elif choice == "2":
        print("\n‚ö†Ô∏è  POZOR! TOTO VYMA≈ΩE √öPLNE V≈†ETKO!")
        print("  Vr√°tane produktov a kateg√≥ri√≠!")
        
        confirm = input("\nNaozaj vymaza≈• V≈†ETKO? Nap√≠≈° 'DELETE ALL': ").strip()
        
        if confirm == "DELETE ALL":
            await reset_data(keep_products=False)
            print("\n‚úÖ Kompletn√Ω reset dokonƒçen√Ω!")
            print("‚ö†Ô∏è  Nezabudni znova prida≈• produkty a kateg√≥rie!")
        else:
            print("\n‚ùå Zru≈°en√©")
            
    else:
        print("\n‚ùå Zru≈°en√©")
    
    # Uk√°≈æ fin√°lny stav
    print("\n" + "="*60)
    await show_current_stats()

if __name__ == "__main__":
    asyncio.run(main())
